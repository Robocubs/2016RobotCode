// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team1701.robot.commands;

import org.usfirst.frc.team1701.robot.Robot;
import org.usfirst.frc.team1701.robot.RobotMap;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class RampShooter extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	double maxspeed = 1.0;

	public RampShooter() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.shooter);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	public RampShooter(double speed) {
		maxspeed = speed;
		if (maxspeed > 0.83) {
			maxspeed = 0.83;
		} else if (maxspeed < RobotMap.shooterIdleSpeed) {
			maxspeed = RobotMap.shooterIdleSpeed;
		}
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.shooter);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	boolean finished;
	double offset = 0;
	double endt = -1;

	// Called just before this Command runs the first time
	protected void initialize() {

		if (maxspeed == 0) {
			RobotMap.shooterShooterMotor.set(0);
			finished = true;
			return;
		}
		endt = 1;
		finished = false;
		offset = RobotMap.shooterShooterMotor.get();
		RobotMap.shooterShooterMotor.set(maxspeed);
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
//		double time = t.get() * 2 - 2;
//		SmartDashboard.putNumber("Time", t.get());
//		SmartDashboard.putNumber("End Time", endt);
//		if (endt < 0) {
//			SmartDashboard.putNumber("Shooter Motor", RobotMap.shooterShooterMotor.get());
//			SmartDashboard.putNumber("Max Speed", maxspeed);
//			if (RobotMap.shooterShooterMotor.get() >= maxspeed) {
//				endt = t.get() + 0.5;
//				RobotMap.shooterShooterMotor.set(maxspeed);
//			} else if (RobotMap.shooterShooterMotor.get() < Sigmoid(time))
//				RobotMap.shooterShooterMotor.set(Sigmoid(time) + offset);
//			if(RobotMap.shooterShooterMotor.get() > 0.99){
//				RobotMap.shooterShooterMotor.set(1);
//			}
//		}else 
		if(RobotMap.shooterEncoder.getRate() < -1500){
			finished = true;
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return finished;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		finished = true;
	}

	private double Sigmoid(double in) {
		return 1 / (1 + Math.exp(-2 * in));
	}
}
