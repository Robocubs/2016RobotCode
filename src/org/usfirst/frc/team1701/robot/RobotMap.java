// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team1701.robot;

import java.util.ArrayList;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {

	public static boolean goalFound = false;
	public static double goalX = 0;
	public static double AimX = 0;
	public static double goalY = 0;
	public static double goalAngle = 0;
	public static ArrayList<Boolean> goalFoundHistory = new ArrayList<>();
	public static ArrayList<Double> goalXHistory = new ArrayList<>();
	public static ArrayList<Double> goalYHistory = new ArrayList<>();
	public static final double deadconst = .1;
	public static double speedmult = 1.0;
	public static final double Sigslope = 3;
	public static final double shooterIdleSpeed = 0.0;

	public static PIDRotate PIDControl = new PIDRotate();

	// static final double kP = -0.06;
	// static final double kI = -0.03;
	// static final double kD = -0.17;
	// static final double kF = 0.00;

	 static final double kP = -0.036;
	 static final double kI = -0.003;
	 static final double kD = -0.080;
	 static final double kF = 0.00;

//	static final double kP = -0.048;
//	static final double kI = -0.029;
//	static final double kD = -0.22;
//	static final double kF = 0.00;

	static final double kToleranceDegrees = 2.0f;

	public static boolean allLightsOn = false;
	
	public static double rotateToAngleRate = 0;
	public static NetworkTable vision;
	public static AHRS ahrs;
	public static PIDController turnController;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static CANTalon drivetrainFrontLeftDriveMotor;
	public static CANTalon drivetrainFrontRightDriveMotor;
	public static CANTalon drivetrainRearRightDriveMotor;
	public static CANTalon drivetrainRearLeftDriveMotor;
	public static RobotDrive drivetrainRDrive;
	public static CANTalon pickupRightArmMotor;
	public static CANTalon pickupLeftArmMotor;
	public static CANTalon pickupIntakeMotor;
	public static DigitalInput pickupTopLimitSwitch;
	public static DigitalInput pickupShooterBallSensor;
	public static Encoder pickupArmAngleEncoderLeft;
	public static Encoder pickupArmAngleEncoderRight;
	public static CANTalon shooterShooterMotor;
	public static DigitalInput shooterBarrelBallSensor;
	public static Relay lightsDisplay;
	public static Relay lightsCameraLight;
	public static Relay lightsAimLight;
	public static Encoder shooterEncoder;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {

		NetworkTable.setServerMode();
		vision = NetworkTable.getTable("vision");

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		drivetrainFrontLeftDriveMotor = new CANTalon(0);
		drivetrainFrontLeftDriveMotor.setSafetyEnabled(false);
		drivetrainFrontLeftDriveMotor.enableBrakeMode(true);
		// LiveWindow.addActuator("Drivetrain", "FrontLeftDriveMotor",
		// drivetrainFrontLeftDriveMotor);

		drivetrainFrontRightDriveMotor = new CANTalon(2);
		drivetrainFrontRightDriveMotor.setSafetyEnabled(false);
		drivetrainFrontRightDriveMotor.enableBrakeMode(true);
		// LiveWindow.addActuator("Drivetrain", "FrontRightDriveMotor",
		// drivetrainFrontRightDriveMotor);

		drivetrainRearRightDriveMotor = new CANTalon(3);
		drivetrainRearRightDriveMotor.setSafetyEnabled(false);
		drivetrainRearRightDriveMotor.enableBrakeMode(true);
		// LiveWindow.addActuator("Drivetrain", "RearRightDriveMotor",
		// drivetrainRearRightDriveMotor);

		drivetrainRearLeftDriveMotor = new CANTalon(1);
		drivetrainRearLeftDriveMotor.setSafetyEnabled(false);
		drivetrainRearLeftDriveMotor.enableBrakeMode(true);
		// LiveWindow.addActuator("Drivetrain", "RearLeftDriveMotor",
		// drivetrainRearLeftDriveMotor);

		drivetrainRDrive = new RobotDrive(drivetrainFrontLeftDriveMotor, drivetrainRearLeftDriveMotor,
				drivetrainFrontRightDriveMotor, drivetrainRearRightDriveMotor);

		drivetrainRDrive.setSafetyEnabled(false);
		drivetrainRDrive.setSensitivity(0.5);
		drivetrainRDrive.setMaxOutput(1.0);

		drivetrainRDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
		drivetrainRDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
		pickupRightArmMotor = new CANTalon(13);
		pickupRightArmMotor.enableBrakeMode(true);
		// LiveWindow.addActuator("Pickup", "RightArmMotor",
		// pickupRightArmMotor);

		pickupLeftArmMotor = new CANTalon(12);
		pickupLeftArmMotor.enableBrakeMode(true);
		// LiveWindow.addActuator("Pickup", "LeftArmMotor", pickupLeftArmMotor);

		pickupIntakeMotor = new CANTalon(14);
		// LiveWindow.addActuator("Pickup", "IntakeMotor", pickupIntakeMotor);

		pickupTopLimitSwitch = new DigitalInput(0);
		// LiveWindow.addSensor("Pickup", "TopLimitSwitch",
		// pickupTopLimitSwitch);

		pickupShooterBallSensor = new DigitalInput(1);
		// LiveWindow.addSensor("Pickup", "ShooterBallSensor",
		// pickupShooterBallSensor);

		pickupArmAngleEncoderLeft = new Encoder(3, 4, false, EncodingType.k4X);
		// LiveWindow.addSensor("Pickup", "ArmAngleEncoder",
		// pickupArmAngleEncoder);
		pickupArmAngleEncoderLeft.setDistancePerPulse(1.0);
		pickupArmAngleEncoderLeft.setPIDSourceType(PIDSourceType.kRate);

		pickupArmAngleEncoderRight = new Encoder(5, 6, false, EncodingType.k4X);
		// LiveWindow.addSensor("Pickup", "ArmAngleEncoder",
		// pickupArmAngleEncoder);
		pickupArmAngleEncoderRight.setDistancePerPulse(1.0);
		pickupArmAngleEncoderRight.setPIDSourceType(PIDSourceType.kRate);

		shooterShooterMotor = new CANTalon(15);
		// LiveWindow.addActuator("Shooter", "ShooterMotor",
		// shooterShooterMotor);

		shooterBarrelBallSensor = new DigitalInput(2);
		// LiveWindow.addSensor("Shooter", "BarrelBallSensor",
		// shooterBarrelBallSensor);
		lightsDisplay = new Relay(0);
		lightsCameraLight = new Relay(1);
		lightsAimLight = new Relay(2);
		lightsCameraLight.set(Relay.Value.kOn);
		lightsAimLight.set(Relay.Value.kReverse);
		lightsDisplay.set(Relay.Value.kOn);
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		shooterShooterMotor.enableBrakeMode(false);
		pickupIntakeMotor.enableBrakeMode(false);
		ahrs = new AHRS(SPI.Port.kMXP);

		turnController = new PIDController(kP, kI, kD, kF, ahrs, PIDControl);
		turnController.setInputRange(-180.0f, 180.0f);
		turnController.setOutputRange(-1.0, 1.0);
		turnController.setAbsoluteTolerance(kToleranceDegrees);
		// turnController.setPercentTolerance(1.0);
		turnController.setToleranceBuffer(0);
		turnController.setContinuous(true);
		LiveWindow.addActuator("Drivetrain", "RotateController", turnController);
		
		shooterEncoder = new Encoder(7, 8, false, EncodingType.k4X);
		shooterEncoder.setDistancePerPulse(1.0);
		shooterEncoder.setPIDSourceType(PIDSourceType.kRate);
	}

}
