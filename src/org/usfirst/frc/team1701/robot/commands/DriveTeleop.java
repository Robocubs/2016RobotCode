// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team1701.robot.commands;

import org.usfirst.frc.team1701.robot.Robot;
import org.usfirst.frc.team1701.robot.RobotMap;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class DriveTeleop extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveTeleop() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {

		// battery back, light forward on protoboard
		// double leftSpeed = -1 * (Robot.oi.xbox.getRawAxis(1));
		// double rightSpeed = (Robot.oi.xbox.getRawAxis(3));

		double forward = (Robot.oi.joy1.getY());
		double rotate = (Robot.oi.joy2.getX());
//		forward = 0;
		// deadzone--ridiculously large right now because of calibration issues
		// w/ Logitech *FIXED*
		if (forward < RobotMap.deadconst && forward > -RobotMap.deadconst)
			forward = 0;
		else {
			if (forward < 0){
				forward = 2* (forward + RobotMap.deadconst) / (1 - RobotMap.deadconst) +1;
				SmartDashboard.putNumber("initial forward", forward); 
				forward = Sigmoid(-1 * forward * RobotMap.Sigslope);
			}
			else{
				forward = 2*(forward - RobotMap.deadconst) / (1 - RobotMap.deadconst) -1;
				SmartDashboard.putNumber("initial forward", forward); 
				forward = -1 * Sigmoid ( forward * RobotMap.Sigslope);
			}
		}
		if (rotate < RobotMap.deadconst && rotate > -RobotMap.deadconst)
			rotate = 0;
		else {
			if (rotate < 0){
				rotate = 2* (rotate + RobotMap.deadconst) / (1 - RobotMap.deadconst) +1;
				rotate = Sigmoid(-1 * rotate * RobotMap.Sigslope);
				rotate += .3; //adjusted 3/12 for finer turning
			}
			else{
				rotate = 2*(rotate - RobotMap.deadconst) / (1 - RobotMap.deadconst) -1;
				rotate = -1 * Sigmoid(rotate * RobotMap.Sigslope); 
				rotate -= .3; //adjusted 3/12 for finer turning
			}
		}

//		forward = tanh(3 * forward);
//		rotate = tanh(3 * rotate);
		// note: why is this flipped from the WPI documentation?
		
		if(forward > 0.9)
			forward = 1;
		if(rotate > 0.9)
			rotate = 1;
		SmartDashboard.putNumber("final forward", forward); 

		SmartDashboard.putNumber("Rotate Speed", rotate*RobotMap.speedmult); 
		SmartDashboard.putNumber("Drive Speed", forward*RobotMap.speedmult); 
		RobotMap.drivetrainRDrive.arcadeDrive(rotate*RobotMap.speedmult, forward*RobotMap.speedmult);

		// double leftSpeed = -1 * (Robot.oi.xbox.getRawAxis(1) -
		// Robot.oi.xbox.getRawAxis(2));
		// double rightSpeed = (Robot.oi.xbox.getRawAxis(1) +
		// Robot.oi.xbox.getRawAxis(2));
		//
		// leftSpeed = Math.max(Math.min(leftSpeed, 1), -1);
		// rightSpeed = Math.max(Math.min(rightSpeed, 1), -1);
		//
		// RobotMap.drivetrainLeftDriveMotor2.set(leftSpeed);
		// RobotMap.drivetrainLeftDriveMotor1.set(leftSpeed);
		//
		// RobotMap.drivetrainRightDriveMotor2.set(rightSpeed);
		// RobotMap.drivetrainRightDriveMotor1.set(rightSpeed);
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}

//	private double tanh(double in) {
//		return (Math.exp(in) - Math.exp(-1 * in)) / (Math.exp(in) + Math.exp(-1 * in));
//	}

	private double Sigmoid(double in) {
		return 1 / (1 + Math.exp(-1 * in));
	}
}
